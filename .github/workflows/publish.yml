name: Publish
on:
  release:
    types:
      - published
jobs:
  version:
    name: Create version number
    runs-on: ubuntu-18.04
    outputs:
      versionNumber: ${{ steps.version.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --depth=10000

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.x'

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.10

      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt

      - name: Upload version.txt
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: version.txt

      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion

      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt

      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
  build:
    runs-on: ubuntu-latest
    needs: [ version ]
    strategy:
      matrix:
        runtimes: [win-x64, linux-x64]
    env:
      # For use with https://stackoverflow.com/a/60364278/1687436
      RELEASE_VERSION: ${{needs.version.outputs.versionNumber}}
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Show dotnet info
        run: dotnet --info

      - name: Show the version that's being built
        run: echo "Building version $RELEASE_VERSION"

      - name: Restore dotnet tools
        uses: xt0rted/dotnet-tool-restore@v1

      - name: Add dotnet-format problem matcher
        uses: xt0rted/dotnet-format-problem-matcher@v1

      - run: dotnet format MemeManager --verify-no-changes

#      - run:  dotnet publish -c Release -r win-x64
#      - run:  dotnet publish -c Release -r linux-x64

      - run:  dotnet publish -c Release -r ${{ matrix.runtime }}

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-exe
          path: MemeManager/bin/Release/net6.0/win-x64/publish/MemeManager.exe

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-exe
          path: MemeManager/bin/Release/net6.0/linux-x64/publish/MemeManager

  release:
    name: Add artifact to GH Release
    runs-on: ubuntu-latest
    needs: [ version, build ]
    env:
      # For use with https://stackoverflow.com/a/60364278/1687436
      RELEASE_VERSION: ${{needs.version.outputs.versionNumber}}
    steps:
      # TODO: This step might not be necessary
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-exe

      - name: Get Linux artifact
        uses: actions/download-artifact@v2
        with:
          name: linux-exe

      - name: Add all artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          files: |
            MemeManager.exe
            MemeManager
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}